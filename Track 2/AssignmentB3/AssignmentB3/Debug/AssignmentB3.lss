
AssignmentB3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000001a2  00000216  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001a2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000238  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000268  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000098c  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000888  00000000  00000000  00000c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000352  00000000  00000000  000014fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  00001850  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048d  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001b4  00000000  00000000  00001d61  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00001f15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	68 c0       	rjmp	.+208    	; 0xda <__vector_2>
   a:	00 00       	nop
   c:	7a c0       	rjmp	.+244    	; 0x102 <__vector_3>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 ea       	ldi	r30, 0xA2	; 162
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a2 32       	cpi	r26, 0x22	; 34
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	4a d0       	rcall	.+148    	; 0x148 <main>
  b4:	74 c0       	rjmp	.+232    	; 0x19e <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <wait>:
#include <util/delay.h>
#include <avr/interrupt.h>

void wait( int ms )
{
	for (int i=0; i<ms; i++)
  b8:	18 16       	cp	r1, r24
  ba:	19 06       	cpc	r1, r25
  bc:	6c f4       	brge	.+26     	; 0xd8 <wait+0x20>
  be:	20 e0       	ldi	r18, 0x00	; 0
  c0:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c2:	ef ec       	ldi	r30, 0xCF	; 207
  c4:	f7 e0       	ldi	r31, 0x07	; 7
  c6:	31 97       	sbiw	r30, 0x01	; 1
  c8:	f1 f7       	brne	.-4      	; 0xc6 <wait+0xe>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <wait+0x14>
  cc:	00 00       	nop
  ce:	2f 5f       	subi	r18, 0xFF	; 255
  d0:	3f 4f       	sbci	r19, 0xFF	; 255
  d2:	28 17       	cp	r18, r24
  d4:	39 07       	cpc	r19, r25
  d6:	a9 f7       	brne	.-22     	; 0xc2 <wait+0xa>
  d8:	08 95       	ret

000000da <__vector_2>:
		_delay_ms( 1 );		// library function (max 30 ms at 8MHz)
	}
}

ISR( INT1_vect )
{
  da:	1f 92       	push	r1
  dc:	0f 92       	push	r0
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	0f 92       	push	r0
  e2:	11 24       	eor	r1, r1
  e4:	8f 93       	push	r24
	if(PORTD & 1)
  e6:	90 9b       	sbis	0x12, 0	; 18
  e8:	03 c0       	rjmp	.+6      	; 0xf0 <__vector_2+0x16>
	PORTD = 128;
  ea:	80 e8       	ldi	r24, 0x80	; 128
  ec:	82 bb       	out	0x12, r24	; 18
  ee:	03 c0       	rjmp	.+6      	; 0xf6 <__vector_2+0x1c>
	else
	PORTD = PORTD/2;
  f0:	82 b3       	in	r24, 0x12	; 18
  f2:	86 95       	lsr	r24
  f4:	82 bb       	out	0x12, r24	; 18
}
  f6:	8f 91       	pop	r24
  f8:	0f 90       	pop	r0
  fa:	0f be       	out	0x3f, r0	; 63
  fc:	0f 90       	pop	r0
  fe:	1f 90       	pop	r1
 100:	18 95       	reti

00000102 <__vector_3>:

ISR( INT2_vect )
{
 102:	1f 92       	push	r1
 104:	0f 92       	push	r0
 106:	0f b6       	in	r0, 0x3f	; 63
 108:	0f 92       	push	r0
 10a:	11 24       	eor	r1, r1
 10c:	8f 93       	push	r24
	if(PORTD & 128)
 10e:	97 9b       	sbis	0x12, 7	; 18
 110:	03 c0       	rjmp	.+6      	; 0x118 <__vector_3+0x16>
	PORTD = 1;
 112:	81 e0       	ldi	r24, 0x01	; 1
 114:	82 bb       	out	0x12, r24	; 18
 116:	03 c0       	rjmp	.+6      	; 0x11e <__vector_3+0x1c>
	else
	PORTD = PORTD*2;
 118:	82 b3       	in	r24, 0x12	; 18
 11a:	88 0f       	add	r24, r24
 11c:	82 bb       	out	0x12, r24	; 18
}
 11e:	8f 91       	pop	r24
 120:	0f 90       	pop	r0
 122:	0f be       	out	0x3f, r0	; 63
 124:	0f 90       	pop	r0
 126:	1f 90       	pop	r1
 128:	18 95       	reti

0000012a <display>:
int lookuptable[] = {0b00111111, 0b00000110, 0b01011011, 0b01001111, 0b01100110, 0b01101101, 0b01111101, 0b00000111,
0b01111111, 0b01101111, 0b01110111, 0b01111100, 0b00111001, 0b01011110, 0b01111011, 0b01110001, 0b01111001};

void display(int digit)
{
	if(digit>15 || digit < 0)
 12a:	80 31       	cpi	r24, 0x10	; 16
 12c:	91 05       	cpc	r25, r1
 12e:	20 f0       	brcs	.+8      	; 0x138 <display+0xe>
	PORTB = lookuptable[16];
 130:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <__data_start+0x20>
 134:	88 bb       	out	0x18, r24	; 24
 136:	08 95       	ret
	else
	PORTB = lookuptable[digit];
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	fc 01       	movw	r30, r24
 13e:	e0 50       	subi	r30, 0x00	; 0
 140:	ff 4f       	sbci	r31, 0xFF	; 255
 142:	80 81       	ld	r24, Z
 144:	88 bb       	out	0x18, r24	; 24
 146:	08 95       	ret

00000148 <main>:
}

int main( void )
{
	// Init I/O
	DDRB = 0xFF;
 148:	8f ef       	ldi	r24, 0xFF	; 255
 14a:	87 bb       	out	0x17, r24	; 23
	DDRD = 0x00;
 14c:	11 ba       	out	0x11, r1	; 17
	int value = 6;
 14e:	c6 e0       	ldi	r28, 0x06	; 6
 150:	d0 e0       	ldi	r29, 0x00	; 0
 152:	cc 24       	eor	r12, r12
 154:	ca 94       	dec	r12
 156:	dd 24       	eor	r13, r13
 158:	da 94       	dec	r13
 15a:	68 94       	set
 15c:	ee 24       	eor	r14, r14
 15e:	e4 f8       	bld	r14, 4
 160:	f1 2c       	mov	r15, r1

	while (1)
	{
		if((PIND & 1) && (PIND & 2))
		{
			value = 0;
 162:	00 e0       	ldi	r16, 0x00	; 0
 164:	10 e0       	ldi	r17, 0x00	; 0
	DDRD = 0x00;
	int value = 6;

	while (1)
	{
		if((PIND & 1) && (PIND & 2))
 166:	80 9b       	sbis	0x10, 0	; 16
 168:	02 c0       	rjmp	.+4      	; 0x16e <main+0x26>
 16a:	81 99       	sbic	0x10, 1	; 16
 16c:	10 c0       	rjmp	.+32     	; 0x18e <main+0x46>
		{
			value = 0;
		}
		else if(PIND & 2)
 16e:	81 9b       	sbis	0x10, 1	; 16
 170:	07 c0       	rjmp	.+14     	; 0x180 <main+0x38>
 172:	21 96       	adiw	r28, 0x01	; 1
 174:	c1 31       	cpi	r28, 0x11	; 17
 176:	d1 05       	cpc	r29, r1
 178:	64 f0       	brlt	.+24     	; 0x192 <main+0x4a>
 17a:	ce 2d       	mov	r28, r14
 17c:	df 2d       	mov	r29, r15
 17e:	09 c0       	rjmp	.+18     	; 0x192 <main+0x4a>
			if(value > 16)
			{
				value = 16;
			}
		}
		else if(PIND & 1)
 180:	80 9b       	sbis	0x10, 0	; 16
 182:	07 c0       	rjmp	.+14     	; 0x192 <main+0x4a>
 184:	21 97       	sbiw	r28, 0x01	; 1
 186:	2a f4       	brpl	.+10     	; 0x192 <main+0x4a>
 188:	cc 2d       	mov	r28, r12
 18a:	dd 2d       	mov	r29, r13
 18c:	02 c0       	rjmp	.+4      	; 0x192 <main+0x4a>

	while (1)
	{
		if((PIND & 1) && (PIND & 2))
		{
			value = 0;
 18e:	c0 2f       	mov	r28, r16
 190:	d1 2f       	mov	r29, r17
			if(value < -1)
			{
				value = -1;
			}
		}
		display(value);
 192:	ce 01       	movw	r24, r28
 194:	ca df       	rcall	.-108    	; 0x12a <display>
		wait(500);
 196:	84 ef       	ldi	r24, 0xF4	; 244
 198:	91 e0       	ldi	r25, 0x01	; 1
 19a:	8e df       	rcall	.-228    	; 0xb8 <wait>
	}
 19c:	e4 cf       	rjmp	.-56     	; 0x166 <main+0x1e>

0000019e <_exit>:
 19e:	f8 94       	cli

000001a0 <__stop_program>:
 1a0:	ff cf       	rjmp	.-2      	; 0x1a0 <__stop_program>
